{"version":3,"sources":["react-auth0-wrapper.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["DEFAULT_REDIRECT_CALLBACK","window","history","replaceState","document","title","location","pathname","Auth0Context","React","createContext","useAuth0","useContext","NavBar","isAuthenticated","loginWithRedirect","logout","onClick","App","loading","useState","currentContent","setCurrent","buttonContent","setButtonContent","notesContent","setNotesContent","toggleEffect","setToggleEffect","useEffect","key","notes","i","localStorage","length","substring","push","date","content","getItem","recognition","SpeechRecognition","webkitSpeechRecognition","lang","e","console","error","onstart","onspeechend","onerror","event","noteContent","onresult","current","resultIndex","transcript","results","className","start","dateTime","stop","Date","toLocaleString","setItem","alert","map","note","type","data","log","removeItem","Boolean","hostname","match","ReactDOM","render","children","onRedirectCallback","initOptions","setIsAuthenticated","user","setUser","auth0Client","setAuth0","setLoading","popupOpen","setPopupOpen","a","createAuth0Client","auth0FromHook","search","includes","handleRedirectCallback","appState","getUser","initAuth0","loginWithPopup","params","Provider","value","getIdTokenClaims","getTokenSilently","getTokenWithPopup","domain","config","client_id","clientId","redirect_uri","origin","targetUrl","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2f2ba513.chunk.js","sourcesContent":["// src/react-auth0-wrapper.js\nimport React, { useState, useEffect, useContext } from \"react\";\nimport createAuth0Client from \"@auth0/auth0-spa-js\";\n\nconst DEFAULT_REDIRECT_CALLBACK = () =>\n  window.history.replaceState({}, document.title, window.location.pathname);\n\nexport const Auth0Context = React.createContext();\nexport const useAuth0 = () => useContext(Auth0Context);\nexport const Auth0Provider = ({\n  children,\n  onRedirectCallback = DEFAULT_REDIRECT_CALLBACK,\n  ...initOptions\n}) => {\n  const [isAuthenticated, setIsAuthenticated] = useState();\n  const [user, setUser] = useState();\n  const [auth0Client, setAuth0] = useState();\n  const [loading, setLoading] = useState(true);\n  const [popupOpen, setPopupOpen] = useState(false);\n\n  useEffect(() => {\n    const initAuth0 = async () => {\n      const auth0FromHook = await createAuth0Client(initOptions);\n      setAuth0(auth0FromHook);\n\n      if (window.location.search.includes(\"code=\")) {\n        const { appState } = await auth0FromHook.handleRedirectCallback();\n        onRedirectCallback(appState);\n      }\n\n      const isAuthenticated = await auth0FromHook.isAuthenticated();\n\n      setIsAuthenticated(isAuthenticated);\n\n      if (isAuthenticated) {\n        const user = await auth0FromHook.getUser();\n        setUser(user);\n      }\n\n      setLoading(false);\n    };\n    initAuth0();\n    // eslint-disable-next-line\n  }, []);\n\n  const loginWithPopup = async (params = {}) => {\n    setPopupOpen(true);\n    try {\n      await auth0Client.loginWithPopup(params);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setPopupOpen(false);\n    }\n    const user = await auth0Client.getUser();\n    setUser(user);\n    setIsAuthenticated(true);\n  };\n\n  const handleRedirectCallback = async () => {\n    setLoading(true);\n    await auth0Client.handleRedirectCallback();\n    const user = await auth0Client.getUser();\n    setLoading(false);\n    setIsAuthenticated(true);\n    setUser(user);\n  };\n  return (\n    <Auth0Context.Provider\n      value={{\n        isAuthenticated,\n        user,\n        loading,\n        popupOpen,\n        loginWithPopup,\n        handleRedirectCallback,\n        getIdTokenClaims: (...p) => auth0Client.getIdTokenClaims(...p),\n        loginWithRedirect: (...p) => auth0Client.loginWithRedirect(...p),\n        getTokenSilently: (...p) => auth0Client.getTokenSilently(...p),\n        getTokenWithPopup: (...p) => auth0Client.getTokenWithPopup(...p),\n        logout: (...p) => auth0Client.logout(...p)\n      }}\n    >\n      {children}\n    </Auth0Context.Provider>\n  );\n};","import React from \"react\";\nimport { useAuth0 } from \"../react-auth0-wrapper\";\n\nconst NavBar = () => {\n  const { isAuthenticated, loginWithRedirect, logout } = useAuth0();\n\n  return (\n    <div>\n      {!isAuthenticated && (\n        <button\n          onClick={() =>\n            loginWithRedirect({})\n          }\n        >\n          Log in\n        </button>\n      )}\n\n      {isAuthenticated && <button onClick={() => logout()}>Log out</button>}\n    </div>\n  );\n};\n\nexport default NavBar;","import React from 'react';\nimport './App.scss';\nimport NavBar from \"./components/Navbar\";\nimport { useAuth0 } from \"./react-auth0-wrapper\";\n\nfunction App() {\n  const { loading } = useAuth0();\n  const [currentContent, setCurrent] = React.useState('');\n  const [buttonContent, setButtonContent] = React.useState('Start Speaking');\n  const [notesContent, setNotesContent] = React.useState(null);\n  const [toggleEffect, setToggleEffect] = React.useState(true);\n  \n  React.useEffect(() => {\n   const getAllNotes = () => {\n    var notes = [];\n    var key;\n    for (var i = 0; i < localStorage.length; i++) {\n      key = localStorage.key(i);\n\n      if(key.substring(0,5) === 'note-') {\n        notes.push({\n          date: key,\n          content: localStorage.getItem(localStorage.key(i))\n        });\n      } \n    }\n    return notes;\n  }\n   setNotesContent(getAllNotes);\n    }, [toggleEffect]);\n\n  try {\n    var SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    var recognition = new SpeechRecognition();\n    recognition.lang = 'en-US';\n  }\n  catch(e) {\n    console.error(e);\n  };\n  \n  recognition.onstart = () => { \n  setButtonContent('Voice recognition activated. Try speaking into the microphone.');\n  };\n\n  recognition.onspeechend = () => {\n    setButtonContent('You were quiet for a while so voice recognition turned itself off. Click again to start');\n  };\n\n  recognition.onerror = (event) => {\n    if(event.error === 'no-speech') {\n      setButtonContent('No speech was detected. Try again.');  \n    };\n  }\n  \n  var noteContent = '';\n  \n  recognition.onresult = (event) => {\n\n  var current = event.resultIndex;\n\n  var transcript = event.results[current][0].transcript;\n  noteContent += transcript;\n  setCurrent(noteContent);\n  };\n  \n  const handleStartClick=()=>{\n    recognition.start();\n  };\n  \n  const saveNote = (dateTime, content) => {\n    localStorage.setItem('note-' + dateTime, content);\n  };\n  \n  const handleSaveNotes = () => {\n    recognition.stop();\n    if(currentContent){\n      saveNote(new Date().toLocaleString(), currentContent);\n      setToggleEffect(!toggleEffect);\n    }\n    else{\n      alert('Empty Content')\n    }\n  };\n  \n  const handleDeleteClick = (e,data) => {\n    if(data){\n      console.log(data);\n      localStorage.removeItem(data);\n      setToggleEffect(!toggleEffect);\n    }\n  }\n\n  if (loading) {\n    return (\n      <div>Loading...</div>\n    );\n  }\n  \n  return (\n    <div className=\"App\">\n    <header>\n        <NavBar />\n      </header>\n      <button className=\"App__button\" onClick={handleStartClick}>{buttonContent}</button>\n      <div className=\"App__auto-typing\">\n        {currentContent}\n      </div>\n<button className=\"App__button\" onClick={handleSaveNotes}>Save Notes</button>\n      <div className=\"App__notes\">\n        {notesContent && notesContent.map((note,i) => {\n          return(\n            <div className=\"App__notes_content\" key={i}>{i+1}) {note.content}\n              <button className=\"App__notes_content_button\" key={i} type='button' onClick={e => handleDeleteClick(e,(note.date))}>delete</button>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// src/index.js\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Auth0Provider } from \"./react-auth0-wrapper\";\nimport config from \"./auth_config.json\";\n\n// A function that routes the user to the right place\n// after login\nconst onRedirectCallback = appState => {\n  window.history.replaceState(\n    {},\n    document.title,\n    appState && appState.targetUrl\n      ? appState.targetUrl\n      : window.location.pathname\n  );\n};\n\nReactDOM.render(\n  <Auth0Provider\n    domain={config.domain}\n    client_id={config.clientId}\n    redirect_uri={window.location.origin}\n    onRedirectCallback={onRedirectCallback}\n>\n    <App />\n  </Auth0Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}